import os
import pandas as pd
from dotenv import load_dotenv
from openai import OpenAI
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string

load_dotenv()

client = OpenAI(
  api_key=os.environ.get("OPENAI_API_KEY"),
)

messages = [{"role": "system", "content": "You are a interview analyst"}]


def CustomChatGPT(user_input):
    """
    Generate a response using OpenAI's ChatGPT model based on the user input.

    Parameters:
        user_input (str): The user's input message.
        messages (list): A list of message dictionaries representing the conversation history.
                         Each message dictionary should have keys 'role' (either 'user' or 'assistant')
                         and 'content' (the text content of the message).

    Returns:
        str: The response generated by the ChatGPT model based on the user input.
    """
    messages.append({"role": "user", "content": user_input})
    response = client.chat.completions.create(
        model = "gpt-3.5-turbo",
        messages = messages
    )
    chatgpt_reply = response.choices[0].message.content
    messages.append({"role": "assistant", "content": chatgpt_reply})
    return chatgpt_reply


def create_gpt_input(data):
    """
    Create a formatted input string for the GPT model based on the provided data.

    Parameters:
        data (dict): A dictionary containing the responses to the questionnaire.

    Returns:
        str: A formatted string containing the responses to the questionnaire and additional instructions.
    """
    experience = data['experience']
    experience_years = data['experience_years']
    ans1 = data['ans1']
    ans2 = data['ans2']
    ans3 = data['ans3']
    ans4 = data['ans4']
    ans5 = data['ans5']
    ans6 = data['ans6']
    ans7 = data['ans7']
    ans8 = data['ans8']
    ans9 = data['ans9']
    ans10 = data['ans10']

    # Construct the final string
    final_string = f"Position Applied: Manager\n\nRole: Manager\n\nAbout Myself:\n\nExperience: {experience} {experience_years}\n\n"
    final_string += f"Q1 - Can you describe your experience with diary management and scheduling appointments?\nA1 - {ans1}\n\n"
    final_string += f"Q2 - How do you handle confidential information and sensitive situations?\nA2 - {ans2}\n\n"
    final_string += f"Q3 - Can you provide an example of a complex problem you've solved in a similar role?\nA3 - {ans3}\n\n"
    final_string += f"Q4 - How do you prioritize tasks and manage your time when dealing with a busy executive's schedule?\nA4 - {ans4}\n\n"
    final_string += f"Q5 - How comfortable are you with liaising with high-level stakeholders and managing professional relationships?\nA5 - {ans5}\n\n"
    final_string += f"Q6 - Can you describe a situation where you had to handle an unexpected issue or emergency?\nA6 - {ans6}\n\n"
    final_string += f"Q7 - What experience do you have with travel planning and logistics?\nA7 - {ans7}\n\n"
    final_string += f"Q8 - How do you ensure effective communication between the MD and other parties?\nA8 - {ans8}\n\n"
    final_string += f"Q9 - Can you provide an example of an initiative you took to improve efficiency or effectiveness in your role?\nA9 - {ans9}\n\n"
    final_string += f"Q10 - How do you handle stress and pressure in managing a busy executive's affairs?\nA10 - {ans10}\n\n"

    final_string += f"So based on the questions and answers below please let me know if the user is Qualified, Somewhat Qualified, or Not Qualified  and give the ans point wise.\n\n"
    final_string += f"Add extra '\n' in the answer so that the reponse can be shown more clearly with clear formatting.\n\n"
    final_string += f"Also give me exact ans like Qualified, Somewhat Qualified, or Not Qualified at the end of all  points not in every point so its clear.\n\n"
    final_string += f"Please check each ans correctly and if ans are not clear and jibberish just say Not Qualified.\n\n"

    return final_string


def process_excel_file(file_path):
    """
    Process the Excel file located at the specified file path.

    Parameters:
        file_path (str): The path to the Excel file.

    Returns:
        list: A list of dictionaries containing grouped and counted data from the Excel file.
    """
    # Read Excel file into DataFrame
    df = pd.read_excel(file_path)

    # Group by 'State' and 'DPD' columns and count occurrences
    grouped_data = df.groupby(['State', 'DPD']).size().reset_index(name='Count')

    # Convert DataFrame to list of dictionaries for template rendering
    data = grouped_data.to_dict(orient='records')

    return data


def send_email(data):
    """
    Send an email with the provided data.

    Parameters:
        data (list): A list of dictionaries containing data to be displayed in the email.

    Returns:
        None
    """
    subject = 'Python Assignment By Chetan Vashisth'
    text_content = 'This is a plain text version of the data.'  # Optional for some email clients

    # Render the HTML content using your template
    html_content = render_to_string('data_display.html', {'data': data})

    # Create the email message
    email = EmailMultiAlternatives(
        subject,
        text_content,
        'chetan.v@simformsolutions.com',
        ['tech@themedius.ai'],
    )
    email.attach_alternative(html_content, 'text/html')  # Attach HTML alternative

    email.send(fail_silently=False)
